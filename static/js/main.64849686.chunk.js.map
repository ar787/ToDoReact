{"version":3,"sources":["myComponents/header.jsx","myComponents/Item.jsx","myComponents/Allitems.jsx","myComponents/ToDo.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","handelChange","e","target","value","length","props","Change","handelClick","Click","errorMessage","errorMessageBottom","this","InputError","className","TextField","onChange","variant","error","label","helperText","color","Button","onClick","React","Component","Item","handelClickItem","setState","done","state","closeItem","i","remove","index","style","opacity","Icon","AllItems","removeItem","arrayList","delete","removeItemAll","splice","arr","listStyleType","map","element","name","key","padding","lineHeight","ToDo","handelChangeToDo","val","handelClickToDo","listArr","list","trim","push","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64849686.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\" \r\n\r\nexport class Header extends React.Component  {\r\n    handelChange = (e) => {\r\n      if(e.target.value.length <= 25) {\r\n        this.props.Change(e.target.value);\r\n      }  \r\n    }\r\n  \r\n    handelClick = () => {\r\n      this.props.Click();\r\n    }\r\n    render() {\r\n      let errorMessage = \"\";\r\n      let errorMessageBottom = \"\";\r\n      errorMessage = this.props.InputError ? errorMessage = \"Invalid text\" : errorMessage = \"Input text\";\r\n      errorMessageBottom = this.props.InputError ? errorMessageBottom = \"Error message\" : errorMessageBottom=\" \";\r\n      return(\r\n        <div className=\"header\">\r\n          <h1>ToDo List</h1>\r\n          <TextField value={this.props.value} onChange={this.handelChange} variant=\"outlined\" error={this.props.InputError} label={errorMessage}helperText={errorMessageBottom} color=\"secondary\"/>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handelClick}>Add</Button>\r\n        </div> \r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport class Item extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {done:this.props.done};\r\n    }\r\n    \r\n    handelClickItem = () => {\r\n      this.setState({\r\n        done: !this.state.done,\r\n      });\r\n    }\r\n  \r\n    closeItem = (i) => {\r\n      this.props.remove(i);\r\n    }\r\n    render() {\r\n      \r\n      let value = this.props.value\r\n      let index = this.props.index;\r\n      let style = {};        \r\n      style.opacity = this.state.done ? \"0.6\" : \"1\";\r\n    \r\n      return (\r\n          <div className=\"Item\">\r\n              <Icon  className=\"close\" onClick={() => this.closeItem(index)}><DeleteIcon/></Icon>\r\n            <li onClick={this.handelClickItem} style={style}>  {value} </li>\r\n          </div> \r\n      );\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport {Item} from \"./Item\";\r\nimport {Button, Icon} from \"@material-ui/core\" \r\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\r\n\r\nexport class AllItems extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {delete: false};\r\n    }\r\n    removeItem = (i) => {\r\n      // this.props.arrayList.splice(i,1);\r\n      delete this.props.arrayList[i];\r\n      \r\n      this.setState({\r\n        delete:true,\r\n      });\r\n    }\r\n    removeItemAll = () => {\r\n      this.props.arrayList.splice(0,this.props.arrayList.length);\r\n        this.setState({\r\n            delete:!this.state.delete,\r\n        });\r\n    }\r\n    render() {\r\n      let arr = this.props.arrayList;\r\n      return(\r\n        <div className=\"AllItems\">\r\n          <ul style={{listStyleType:\"decimal\"}}>\r\n            {arr.map((element, index) => <Item value={element.name} key={index} index={index} remove={this.removeItem} done={element.done} />)}\r\n          </ul>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={this.removeItemAll}>Clear all\r\n             <Icon style={{padding:\"0 7px\",lineHeight:\"0px\"}}>\r\n                <ClearAllIcon/>\r\n              </Icon>\r\n            </Button>\r\n        </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport {Header} from \"./header\";\r\nimport {AllItems} from \"./Allitems\";\r\nexport class ToDo extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {value:\"\",error:false,list:[]};\r\n    }\r\n    handelChangeToDo = (val) => {\r\n      this.setState({\r\n        value:val,\r\n      });\r\n    }\r\n  \r\n    handelClickToDo = () => {\r\n      let listArr = this.state.list;\r\n      if(this.state.value.trim() !==  \"\") {\r\n        listArr.push({name:this.state.value,done:false});\r\n        this.setState({error:false});\r\n        \r\n      }else {\r\n        this.setState({error:true});\r\n      }\r\n  \r\n      this.setState({\r\n        value:\"\",\r\n        list:listArr,\r\n      });\r\n      console.log(listArr);\r\n    }\r\n    render() {\r\n      return(\r\n        <div className=\"main\">\r\n        <Header value={this.state.value} Click={this.handelClickToDo} Change={this.handelChangeToDo} InputError={this.state.error} />\r\n        <p>{`${this.state.value}`} <b>{`${this.state.value.length}`}</b> </p>\r\n        <AllItems arrayList={this.state.list}/>\r\n        </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\n// import { withStyles } from \"@material-ui/core/styles\";\nimport './App.css';\nimport {ToDo} from \"./myComponents/ToDo\";\n// import Demo from \"../src/hoc/returnButton\";\nfunction App() {\n  \n  return (\n    <ToDo/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}